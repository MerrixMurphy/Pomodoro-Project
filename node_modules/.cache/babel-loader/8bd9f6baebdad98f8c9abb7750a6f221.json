{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\merri\\\\Project_Pomodoro_Timer_Qualified_1\\\\src\\\\pomodoro\\\\Timer.js\";\nimport React, { useState } from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Timer({\n  session,\n  breakDuration,\n  focusDuration\n}) {\n  return session ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mb-2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          \"data-testid\": \"session-title\",\n          children: [session.label, \" for\", \" \", session.label === \"On Break\" ? minutesToDuration(breakDuration) : minutesToDuration(focusDuration), \" \", \"minutes\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"lead\",\n          \"data-testid\": \"session-sub-title\",\n          children: [secondsToDuration(session.timeRemaining), \" remaining\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mb-2\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress\",\n          style: {\n            height: \"20px\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bar\",\n            role: \"progressbar\",\n            \"aria-valuemin\": \"0\",\n            \"aria-valuemax\": \"100\",\n            \"aria-valuenow\": session.label === \"Focusing\" ? (focusDuration * 60 - session.timeRemaining) * (100 / (focusDuration * 60)) : (breakDuration * 60 - session.timeRemaining) * (100 / (breakDuration * 60)) // TODO: Increase aria-valuenow as elapsed time increases\n            ,\n            style: {\n              width: `${session.label === \"Focusing\" ? (focusDuration * 60 - session.timeRemaining) * (100 / (focusDuration * 60)) : (breakDuration * 60 - session.timeRemaining) * (100 / (breakDuration * 60))}%`\n            } // TODO: Increase width % as elapsed time increases\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this) : null;\n}\n\n_c = Timer;\nexport default Timer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"sources":["C:/Users/merri/Project_Pomodoro_Timer_Qualified_1/src/pomodoro/Timer.js"],"names":["React","useState","minutesToDuration","secondsToDuration","Timer","session","breakDuration","focusDuration","label","timeRemaining","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;AACA,SAASC,iBAAT,QAAkC,mBAAlC;;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,OAAF;AAAWC,EAAAA,aAAX;AAA0BC,EAAAA;AAA1B,CAAf,EAA0D;AACxD,SAAOF,OAAO,gBACZ;AAAA,4BAEE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,gCAEE;AAAI,yBAAY,eAAhB;AAAA,qBACGA,OAAO,CAACG,KADX,UACsB,GADtB,EAEGH,OAAO,CAACG,KAAR,KAAkB,UAAlB,GACGN,iBAAiB,CAACI,aAAD,CADpB,GAEGJ,iBAAiB,CAACK,aAAD,CAJvB,EAIwC,GAJxC;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,eAUE;AAAG,UAAA,SAAS,EAAC,MAAb;AAAoB,yBAAY,mBAAhC;AAAA,qBACGJ,iBAAiB,CAACE,OAAO,CAACI,aAAT,CADpB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFF,eAkBE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,KAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,UAAf;AAA0B,UAAA,KAAK,EAAE;AAAEC,YAAAA,MAAM,EAAE;AAAV,WAAjC;AAAA,iCACE;AACE,YAAA,SAAS,EAAC,cADZ;AAEE,YAAA,IAAI,EAAC,aAFP;AAGE,6BAAc,GAHhB;AAIE,6BAAc,KAJhB;AAKE,6BACEL,OAAO,CAACG,KAAR,KAAkB,UAAlB,GACI,CAACD,aAAa,GAAG,EAAhB,GAAqBF,OAAO,CAACI,aAA9B,KACC,OAAOF,aAAa,GAAG,EAAvB,CADD,CADJ,GAGI,CAACD,aAAa,GAAG,EAAhB,GAAqBD,OAAO,CAACI,aAA9B,KACC,OAAOH,aAAa,GAAG,EAAvB,CADD,CATR,CAWI;AAXJ;AAYE,YAAA,KAAK,EAAE;AACLK,cAAAA,KAAK,EAAG,GACNN,OAAO,CAACG,KAAR,KAAkB,UAAlB,GACI,CAACD,aAAa,GAAG,EAAhB,GAAqBF,OAAO,CAACI,aAA9B,KACC,OAAOF,aAAa,GAAG,EAAvB,CADD,CADJ,GAGI,CAACD,aAAa,GAAG,EAAhB,GAAqBD,OAAO,CAACI,aAA9B,KACC,OAAOH,aAAa,GAAG,EAAvB,CADD,CAEL;AAPI,aAZT,CAoBK;;AApBL;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAlBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADY,GAgDV,IAhDJ;AAiDD;;KAlDQF,K;AAoDT,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport { minutesToDuration } from \"../utils/duration\";\r\nimport { secondsToDuration } from \"../utils/duration\";\r\n\r\nfunction Timer({ session, breakDuration, focusDuration }) {\r\n  return session ? (\r\n    <div>\r\n      {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\r\n          <h2 data-testid=\"session-title\">\r\n            {session.label} for{\" \"}\r\n            {session.label === \"On Break\"\r\n              ? minutesToDuration(breakDuration)\r\n              : minutesToDuration(focusDuration)}{\" \"}\r\n            minutes\r\n          </h2>\r\n          {/* TODO: Update message below correctly format the time remaining in the current session */}\r\n          <p className=\"lead\" data-testid=\"session-sub-title\">\r\n            {secondsToDuration(session.timeRemaining)} remaining\r\n          </p>\r\n        </div>\r\n      </div>\r\n      <div className=\"row mb-2\">\r\n        <div className=\"col\">\r\n          <div className=\"progress\" style={{ height: \"20px\" }}>\r\n            <div\r\n              className=\"progress-bar\"\r\n              role=\"progressbar\"\r\n              aria-valuemin=\"0\"\r\n              aria-valuemax=\"100\"\r\n              aria-valuenow={\r\n                session.label === \"Focusing\"\r\n                  ? (focusDuration * 60 - session.timeRemaining) *\r\n                    (100 / (focusDuration * 60))\r\n                  : (breakDuration * 60 - session.timeRemaining) *\r\n                    (100 / (breakDuration * 60))\r\n              } // TODO: Increase aria-valuenow as elapsed time increases\r\n              style={{\r\n                width: `${\r\n                  session.label === \"Focusing\"\r\n                    ? (focusDuration * 60 - session.timeRemaining) *\r\n                      (100 / (focusDuration * 60))\r\n                    : (breakDuration * 60 - session.timeRemaining) *\r\n                      (100 / (breakDuration * 60))\r\n                }%`,\r\n              }} // TODO: Increase width % as elapsed time increases\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n}\r\n\r\nexport default Timer;\r\n"]},"metadata":{},"sourceType":"module"}